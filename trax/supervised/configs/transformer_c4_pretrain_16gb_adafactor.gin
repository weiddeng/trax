# Copyright 2020 The Trax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import trax.models
import trax.optimizers
import trax.data.inputs
import trax.data.tf_inputs
import trax.supervised.trainer_lib

import t5.data.preprocessors
import t5.data.sentencepiece_vocabulary

max_length = 512
sequence_length = {'inputs': 512, 'targets': 512}
mean_noise_span_length = 3.0
noise_density = 0.15

# Parameters for batcher:
# ==============================================================================
batcher.data_streams = @tf_inputs.data_streams
batcher.bucket_length = 512
# With 64, we get an average of weights_per_core = 450, so 450*8 = 3600 tokens
# per batch on a 2x2 TPU on average per step. T5's batch is ~65k tokens/batch.
# i.e. 18x bigger than ours.
batcher.batch_size_per_device = 4
batcher.eval_batch_size = 64
batcher.max_eval_length = %max_length
batcher.buckets_include_inputs_in_length=True
batcher.id_to_mask = 0

# Parameters for data_streams:
# ==============================================================================
data_streams.data_dir = None
data_streams.dataset_name = 'c4/en:2.3.0'
data_streams.input_name = 'inputs'
data_streams.target_name = 'targets'
data_streams.bare_preprocess_fn=@trax.data.tf_inputs.c4_bare_preprocess_fn

# Parameters for multifactor:
# ==============================================================================
multifactor.constant = 1.0
multifactor.factors = 'constant * rsqrt_decay'
multifactor.warmup_steps = 10000

# Parameters for Adafactor:
# ==============================================================================
Adafactor.beta1 = 0.0
Adafactor.decay_rate = 0.8
Adafactor.clipping_threshold = 1.0
Adafactor.epsilon1 = 1e-30
Adafactor.epsilon2 = 0.001
Adafactor.factored = True
Adafactor.multiply_by_parameter_scale = True

# Parameters for c4_bare_preprocess_fn:
# ==============================================================================
c4_bare_preprocess_fn.sequence_length = %sequence_length

# Parameters for train:
# ==============================================================================
train.eval_frequency = 1000
train.eval_steps = 10
train.model = @trax.models.Transformer  # NoEncDecAttention
# T5 pretrains on C4 for 2^19 steps. Our batches are ~ 1/9th the size.
train.steps = 524288
train.optimizer = @trax.optimizers.Adafactor
train.checkpoint_highest = 'accuracy'
train.checkpoint_lowest = 'loss'

# Corresponds roughly to T5 'large' ~ 770m params, i.e. T5's `bi_v1_large.gin`.
d_model = 1024
d_ff = 4096
n_layers = 24
n_heads = 16

# Parameters for Transformer:
# ==============================================================================
Transformer.d_model = %d_model
Transformer.d_ff = %d_ff
Transformer.dropout = 0.1
Transformer.max_len = 2048
Transformer.mode = 'train'
Transformer.n_heads = %n_heads
Transformer.n_encoder_layers = %n_layers
Transformer.n_decoder_layers = %n_layers
Transformer.input_vocab_size = 32000

# Parameters for TransformerNoEncDecAttention:
# ==============================================================================
TransformerNoEncDecAttention.d_model = %d_model
TransformerNoEncDecAttention.d_ff = %d_ff
TransformerNoEncDecAttention.dropout = 0.1
TransformerNoEncDecAttention.max_len = 2048
TransformerNoEncDecAttention.mode = 'train'
TransformerNoEncDecAttention.n_heads = %n_heads
TransformerNoEncDecAttention.n_encoder_layers = %n_layers
TransformerNoEncDecAttention.n_decoder_layers = %n_layers
TransformerNoEncDecAttention.input_vocab_size = 32000

# Parameters for T5

# Parameters for unsupervised:
# ==============================================================================
# This is what T5 uses.
# unsupervised.preprocessors = \
#     [@preprocessors.select_random_chunk,
#      @preprocessors.reduce_concat_tokens,
#      @preprocessors.split_tokens,
#      @preprocessors.denoise]

# We.delete out reduce_concat_tokens since we don't want to do sequence packing
unsupervised.preprocessors = \
    [@preprocessors.select_random_chunk,
     @preprocessors.split_tokens,
     @preprocessors.denoise]

# Parameters for select_random_chunk:
# ==============================================================================
select_random_chunk.feature_key = 'targets'
select_random_chunk.max_length = %max_length

# Parameters for reduce_concat_tokens:
# ==============================================================================
reduce_concat_tokens.batch_size = 128
reduce_concat_tokens.feature_key = 'targets'

# Parameters for random_spans_helper:
# ==============================================================================
random_spans_helper.extra_tokens_per_span_inputs = 1
random_spans_helper.extra_tokens_per_span_targets = 1
random_spans_helper.inputs_length = %max_length
random_spans_helper.mean_noise_span_length = %mean_noise_span_length
random_spans_helper.noise_density = %noise_density

# Parameters for split_tokens:
# ==============================================================================
split_tokens.feature_key = 'targets'
split_tokens.max_tokens_per_segment = @preprocessors.random_spans_tokens_length()
split_tokens.min_tokens_per_segment = None

# Parameters for denoise:
# ==============================================================================
denoise.inputs_fn = @preprocessors.noise_span_to_unique_sentinel
denoise.noise_density = %noise_density
denoise.noise_mask_fn = @preprocessors.random_spans_noise_mask
denoise.targets_fn = @preprocessors.nonnoise_span_to_unique_sentinel
